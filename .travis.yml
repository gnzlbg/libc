language: rust
rust: nightly
sudo: required
dist: xenial
services: docker

stages:
  - tools
  - build-new
  - build-old
  - tier1
  - tier2-1
  - tier2-2

matrix:
  include:
    # TOOLS
    - name: "Documentation"
      env: TARGET=x86_64-unknown-linux-gnu
      script: sh ci/dox.sh
      install: true
      stage: tools
    - name: "Shellcheck"
      install: true
      script:
        - shellcheck --version
        - shellcheck ci/*.sh
      stage: tools
    - name: "Style"
      install: rustup component add rustfmt-preview
      script:
        - rustc ci/style.rs && ./style src
        - cargo fmt --all -- --check
      stage: tools

    # BUILD stable, beta, nightly
    - name: "Build Stable Rust"
      script: sh ci/build.sh
      stage: build-new
      rust: stable
    - name: "Build Beta Rust"
      script: sh ci/build.sh
      stage: build-new
      rust: beta
    - name: "Build Nightly Rust"
      script: sh ci/build.sh
      stage: build-new
      rust: nightly
    - name: "Build Stable Rust"
      script: sh ci/build.sh
      stage: build-new
      rust: stable
      os: osx
      osx_image: xcode10
    - name: "Build Beta Rust"
      script: sh ci/build.sh
      stage: build-new
      rust: beta
      os: osx
      osx_image: xcode10
    - name: "Build Nightly Rust"
      script: sh ci/build.sh
      stage: build-new
      rust: nightly
      os: osx
      osx_image: xcode10

    # BUILD older Rust versions
    - name: "Build Stable Rust 1.13.0"
      script: sh ci/build.sh
      stage: build-old
      rust: 1.13.0
    - name: "Build Stable Rust 1.19.0"
      script: sh ci/build.sh
      stage: build-old
      rust: 1.19.0
    - name: "Build Stable Rust 1.24.0"
      script: sh ci/build.sh
      stage: build-old
      rust: 1.24.0
    - name: "Build Stable Rust 1.25.0"
      env: RUST=1.25.0
      script: sh ci/build.sh
      stage: build-old
      rust: 1.25.0
    - name: "Build Stable Rust 1.30.0"
      script: sh ci/build.sh
      stage: build-old
      rust: 1.30.0
    - name: "Build Stable Rust 1.13.0"
      script: sh ci/build.sh
      stage: build
      rust: 1.13.0
      os: osx
      osx_image: xcode10
    - name: "Build Stable Rust 1.19.0"
      script: sh ci/build.sh
      stage: build
      rust: 1.19.0
      os: osx
      osx_image: xcode10
    - name: "Build Stable Rust 1.24.0"
      script: sh ci/build.sh
      stage: build
      rust: 1.24.0
      os: osx
      osx_image: xcode10
    - name: "Build Stable Rust 1.25.0"
      env: RUST=1.25.0
      script: sh ci/build.sh
      stage: build
      rust: 1.25.0
      os: osx
      osx_image: xcode10
    - name: "Build Stable Rust 1.30.0"
      script: sh ci/build.sh
      stage: build
      rust: 1.30.0
      os: osx
      osx_image: xcode10


    # TIER 1
    - env: TARGET=i686-apple-darwin
      os: osx
      osx_image: xcode10
      stage: tier1
    - env: TARGET=i686-unknown-linux-gnu
      stage: tier1
    - env: TARGET=x86_64-apple-darwin
      os: osx
      osx_image: xcode10
      stage: tier1
    - env: TARGET=x86_64-unknown-linux-gnu
      stage: tier1

    # Tier 2 targets
    - env: TARGET=aarch64-linux-android
      stage: tier2-1
    - env: TARGET=aarch64-unknown-linux-gnu
      stage: tier2-1
    - env: TARGET=aarch64-unknown-linux-musl
      stage: tier2-1
    - env: TARGET=arm-linux-androideabi
      stage: tier2-1
    - env: TARGET=arm-unknown-linux-gnueabihf
      stage: tier2-1
    - env: TARGET=arm-unknown-linux-musleabihf
      stage: tier2-1
    - env: TARGET=asmjs-unknown-emscripten
      stage: tier2-1
    - env: TARGET=i686-unknown-linux-musl
      stage: tier2-1
    - env: TARGET=mips-unknown-linux-gnu
      stage: tier2-1
    - env: TARGET=mips-unknown-linux-musl
      stage: tier2-1
    - env: TARGET=mips64-unknown-linux-gnuabi64
      stage: tier2-1
    - env: TARGET=mips64el-unknown-linux-gnuabi64
      stage: tier2-1
    - env: TARGET=mipsel-unknown-linux-musl
      stage: tier2-2
    - env: TARGET=powerpc-unknown-linux-gnu
      stage: tier2-2
    - env: TARGET=powerpc64-unknown-linux-gnu
      stage: tier2-2
    - env: TARGET=powerpc64le-unknown-linux-gnu
      stage: tier2-2
    - env: TARGET=s390x-unknown-linux-gnu
      stage: tier2-2
    - env: TARGET=sparc64-unknown-linux-gnu
      stage: tier2-2
    - env: TARGaarch64-unknown-cloudabiET=sparcv9-sun-solaris
      stage: tier2-2
    - env: TARGET=wasm32-unknown-emscripten
      stage: tier2-2
    - env: TARGET=x86_64-linux-android
      stage: tier2-2
    - env: TARGET=x86_64-unknown-linux-gnux32 OPT="--release"
      stage: tier2-2
    - env: TARGET=x86_64-unknown-linux-mussl
      stage: tier2-2

  allow_failures:
      # FIXME: https://github.com/rust-lang/libc/issues/1226
      - env: TARGET=asmjs-unknown-emscripten
      - env: TARGET=wasm32-unknown-emscripten

install: rustup target add $TARGET || true

script:
  - if [[ $TRAVIS_OS_NAME = "linux" ]] && [[ $BUILD_ONLY != "1" ]]; then
      sh ci/run-docker.sh $TARGET;
    else
      sh ci/run.sh $TARGET;
    fi
  
env:
  global:
    secure: "e2/3QjgRN9atOuSHp22TrYG7QVKcYUWY48Hi9b60w+r1+BhPkTseIJLte7WefRhdXtqpjjUJTooKDhnurFOeHaCT+nmBgiv+FPU893sBl4bhesY4m0vgUJVbNZcs6lTImYekWVb+aqjGdgV/XAgCw7c3kPmrZV0MzGDWL64Xaps="

notifications:
  email:
    on_success: never
